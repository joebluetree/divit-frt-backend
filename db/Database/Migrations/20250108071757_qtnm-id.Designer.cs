// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250108071757_qtnm-id")]
    partial class qtnmid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("master_sequence")
                .StartsAt(1000L);

            modelBuilder.Entity("Database.Models.Accounts.acc_acctm", b =>
                {
                    b.Property<int>("acc_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<string>("acc_code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("acc_grp_id")
                        .HasColumnType("integer");

                    b.Property<int?>("acc_maincode_id")
                        .HasColumnType("integer");

                    b.Property<string>("acc_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("acc_row_type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("acc_short_name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("acc_type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("acc_id")
                        .HasName("pk_acc_acctm_acc_id");

                    b.HasIndex("acc_grp_id");

                    b.HasIndex("acc_maincode_id");

                    b.HasIndex("rec_company_id", "acc_row_type", "acc_code")
                        .IsUnique()
                        .HasDatabaseName("uq_acc_acctm_acc_code");

                    b.HasIndex("rec_company_id", "acc_row_type", "acc_name")
                        .IsUnique()
                        .HasDatabaseName("uq_acc_acctm_acc_name");

                    b.HasIndex("rec_company_id", "acc_row_type", "acc_short_name")
                        .IsUnique()
                        .HasDatabaseName("uq_acc_acctm_acc_short_name");

                    b.ToTable("acc_acctm", (string)null);

                    b.HasData(
                        new
                        {
                            acc_id = 1,
                            acc_code = "OI",
                            acc_grp_id = 1,
                            acc_name = "OCEAN IMPORT",
                            acc_row_type = "MAIN-CODE",
                            acc_short_name = "OI",
                            acc_type = "NA",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 128, DateTimeKind.Utc).AddTicks(9995),
                            rec_locked = "N",
                            rec_version = 0
                        },
                        new
                        {
                            acc_id = 2,
                            acc_code = "OE",
                            acc_grp_id = 1,
                            acc_name = "OCEAN EXPORT",
                            acc_row_type = "MAIN-CODE",
                            acc_short_name = "OE",
                            acc_type = "NA",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 128, DateTimeKind.Utc).AddTicks(9999),
                            rec_locked = "N",
                            rec_version = 0
                        },
                        new
                        {
                            acc_id = 3,
                            acc_code = "AR",
                            acc_grp_id = 1,
                            acc_name = "AR",
                            acc_row_type = "MAIN-CODE",
                            acc_short_name = "AR",
                            acc_type = "AR",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 129, DateTimeKind.Utc).AddTicks(2),
                            rec_locked = "N",
                            rec_version = 0
                        },
                        new
                        {
                            acc_id = 4,
                            acc_code = "AP",
                            acc_grp_id = 2,
                            acc_name = "AP",
                            acc_row_type = "MAIN-CODE",
                            acc_short_name = "AP",
                            acc_type = "AP",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 129, DateTimeKind.Utc).AddTicks(4),
                            rec_locked = "N",
                            rec_version = 0
                        },
                        new
                        {
                            acc_id = 5,
                            acc_code = "OE",
                            acc_grp_id = 2,
                            acc_maincode_id = 2,
                            acc_name = "OCEAN EXPORT",
                            acc_row_type = "ACC-CODE",
                            acc_short_name = "OE",
                            acc_type = "NA",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 129, DateTimeKind.Utc).AddTicks(6),
                            rec_locked = "N",
                            rec_version = 0
                        });
                });

            modelBuilder.Entity("Database.Models.Accounts.acc_groupm", b =>
                {
                    b.Property<int>("grp_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<string>("grp_main_group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("grp_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("grp_order")
                        .HasColumnType("integer");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("grp_id")
                        .HasName("pk_acc_groupm_grp_id");

                    b.HasIndex("rec_company_id", "grp_name")
                        .IsUnique()
                        .HasDatabaseName("uq_acc_groupm_grp_name");

                    b.ToTable("acc_groupm", (string)null);

                    b.HasData(
                        new
                        {
                            grp_id = 1,
                            grp_main_group = "ASSET",
                            grp_name = "CURRENT ASSETS",
                            grp_order = 1,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 125, DateTimeKind.Utc).AddTicks(1344),
                            rec_locked = "N",
                            rec_version = 0
                        },
                        new
                        {
                            grp_id = 2,
                            grp_main_group = "LIABILITIES",
                            grp_name = "CURRENT LIABILITIES",
                            grp_order = 1,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 125, DateTimeKind.Utc).AddTicks(1348),
                            rec_locked = "N",
                            rec_version = 0
                        },
                        new
                        {
                            grp_id = 3,
                            grp_main_group = "DIRECT INCOME",
                            grp_name = "DIRECT INCOME",
                            grp_order = 1,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 125, DateTimeKind.Utc).AddTicks(1350),
                            rec_locked = "N",
                            rec_version = 0
                        },
                        new
                        {
                            grp_id = 4,
                            grp_main_group = "DIRECT EXPENSE",
                            grp_name = "DIRECT EXPENSE",
                            grp_order = 1,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 125, DateTimeKind.Utc).AddTicks(1352),
                            rec_locked = "N",
                            rec_version = 0
                        });
                });

            modelBuilder.Entity("Database.Models.Marketing.mark_qtnd_lcl", b =>
                {
                    b.Property<int>("qtnd_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<int?>("mark_qtnmqtnm_id")
                        .HasColumnType("integer");

                    b.Property<int>("qtnd_acc_id")
                        .HasColumnType("integer");

                    b.Property<string>("qtnd_acc_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("qtnd_amt")
                        .HasColumnType("decimal(15,3)");

                    b.Property<int>("qtnd_order")
                        .HasColumnType("integer");

                    b.Property<string>("qtnd_per")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("qtnd_qtnm_id")
                        .HasColumnType("integer");

                    b.Property<int?>("rec_branch_id")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .HasColumnType("text");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("qtnd_id")
                        .HasName("pk_mark_qtnd_lcl_qtnd_pkid");

                    b.HasIndex("mark_qtnmqtnm_id");

                    b.HasIndex("qtnd_acc_id");

                    b.HasIndex("qtnd_qtnm_id");

                    b.HasIndex("rec_branch_id");

                    b.HasIndex("rec_company_id");

                    b.ToTable("mark_qtnd_lcl", (string)null);

                    b.HasData(
                        new
                        {
                            qtnd_id = 1,
                            qtnd_acc_id = 1,
                            qtnd_acc_name = "OCEAN IMPORT",
                            qtnd_amt = 100m,
                            qtnd_order = 1,
                            qtnd_per = "koc-mum",
                            qtnd_qtnm_id = 1,
                            rec_branch_id = 1,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 151, DateTimeKind.Utc).AddTicks(8065),
                            rec_version = 0
                        });
                });

            modelBuilder.Entity("Database.Models.Marketing.mark_qtnm", b =>
                {
                    b.Property<int>("qtnm_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<decimal>("qtnm_amt")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("qtnm_cbm")
                        .HasColumnType("decimal(15,3)");

                    b.Property<int>("qtnm_cfno")
                        .HasColumnType("integer");

                    b.Property<decimal?>("qtnm_cft")
                        .HasColumnType("decimal(15,3)");

                    b.Property<string>("qtnm_commodity")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("qtnm_date")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<decimal?>("qtnm_kgs")
                        .HasColumnType("decimal(15,3)");

                    b.Property<decimal?>("qtnm_lbs")
                        .HasColumnType("decimal(15,3)");

                    b.Property<string>("qtnm_move_type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("qtnm_no")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("qtnm_package")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("qtnm_pld_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("qtnm_plfd_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("qtnm_pod_id")
                        .HasColumnType("integer");

                    b.Property<string>("qtnm_pod_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("qtnm_pol_id")
                        .HasColumnType("integer");

                    b.Property<string>("qtnm_pol_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("qtnm_por_id")
                        .HasColumnType("integer");

                    b.Property<string>("qtnm_por_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("qtnm_quot_by")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("qtnm_routing")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("qtnm_salesman_id")
                        .HasColumnType("integer");

                    b.Property<string>("qtnm_to_addr1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("qtnm_to_addr2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("qtnm_to_addr3")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("qtnm_to_addr4")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("qtnm_to_id")
                        .HasColumnType("integer");

                    b.Property<string>("qtnm_to_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("qtnm_trans_time")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("qtnm_type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime?>("qtnm_valid_date")
                        .HasColumnType("date");

                    b.Property<int?>("rec_branch_id")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .HasColumnType("text");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("qtnm_id")
                        .HasName("pk_mark_qtnm_qtnm_pkid");

                    b.HasIndex("qtnm_pod_id");

                    b.HasIndex("qtnm_pol_id");

                    b.HasIndex("qtnm_por_id");

                    b.HasIndex("qtnm_salesman_id");

                    b.HasIndex("qtnm_to_id");

                    b.HasIndex("rec_branch_id");

                    b.HasIndex("rec_company_id");

                    b.ToTable("mark_qtnm", (string)null);

                    b.HasData(
                        new
                        {
                            qtnm_id = 1,
                            qtnm_amt = 5000m,
                            qtnm_cfno = 1,
                            qtnm_date = new DateTime(2025, 1, 8, 12, 47, 56, 147, DateTimeKind.Local).AddTicks(1460),
                            qtnm_move_type = "TRUCKING",
                            qtnm_no = "QL-1",
                            qtnm_quot_by = "ADMIN",
                            qtnm_salesman_id = 1,
                            qtnm_to_addr1 = "KOCHI",
                            qtnm_to_id = 100,
                            qtnm_to_name = "ABC LTD KOCHI",
                            qtnm_type = "LCL",
                            qtnm_valid_date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2008),
                            rec_branch_id = 1,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 147, DateTimeKind.Utc).AddTicks(1510),
                            rec_version = 0
                        });
                });

            modelBuilder.Entity("Database.Models.Masters.mast_contactm", b =>
                {
                    b.Property<int>("cont_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<int>("cont_country_id")
                        .HasColumnType("integer");

                    b.Property<string>("cont_designation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("cont_email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("cont_mobile")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("cont_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("cont_parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("cont_remarks")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("cont_tel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("cont_title")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("mast_customermcust_id")
                        .HasColumnType("integer");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("cont_id")
                        .HasName("pk_mast_contactm_cont_id");

                    b.HasIndex("cont_country_id");

                    b.HasIndex("cont_parent_id");

                    b.HasIndex("mast_customermcust_id");

                    b.HasIndex("rec_company_id");

                    b.ToTable("mast_contactm", (string)null);

                    b.HasData(
                        new
                        {
                            cont_id = 1,
                            cont_country_id = 1,
                            cont_designation = "EXECUTIVE",
                            cont_email = "joy@cargomar.in",
                            cont_mobile = "9947194307",
                            cont_name = "JOY",
                            cont_parent_id = 100,
                            cont_tel = "0484-245678",
                            cont_title = "MR",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 123, DateTimeKind.Utc).AddTicks(6696),
                            rec_locked = "N",
                            rec_version = 0
                        },
                        new
                        {
                            cont_id = 2,
                            cont_country_id = 1,
                            cont_designation = "EXECUTIVE",
                            cont_email = "ajith@cargomar.in",
                            cont_mobile = "9917294107",
                            cont_name = "AJITH",
                            cont_parent_id = 100,
                            cont_tel = "0484-245678",
                            cont_title = "MR",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 123, DateTimeKind.Utc).AddTicks(6700),
                            rec_locked = "N",
                            rec_version = 0
                        });
                });

            modelBuilder.Entity("Database.Models.Masters.mast_customerm", b =>
                {
                    b.Property<int>("cust_id")
                        .HasColumnType("integer");

                    b.Property<string>("cust_address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("cust_address2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("cust_address3")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("cust_code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<decimal>("cust_credit_limit")
                        .HasColumnType("decimal(15,3)");

                    b.Property<string>("cust_display_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("cust_est_dt")
                        .HasColumnType("date");

                    b.Property<string>("cust_is_parent")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("cust_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("cust_parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("cust_row_type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("cust_short_name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("cust_type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("cust_id")
                        .HasName("pk_mast_customerm_cust_id");

                    b.HasIndex("cust_parent_id");

                    b.HasIndex("rec_company_id", "cust_row_type", "cust_code")
                        .IsUnique()
                        .HasDatabaseName("uq_cust_customerm_cust_code");

                    b.HasIndex("rec_company_id", "cust_row_type", "cust_name")
                        .IsUnique()
                        .HasDatabaseName("uq_cust_customerm_cust_name");

                    b.HasIndex("rec_company_id", "cust_row_type", "cust_short_name")
                        .IsUnique()
                        .HasDatabaseName("uq_cust_customerm_cust_short_name");

                    b.ToTable("mast_customerm", (string)null);

                    b.HasData(
                        new
                        {
                            cust_id = 100,
                            cust_address1 = "PO BOX 12123",
                            cust_address2 = "LMS BUILDING",
                            cust_address3 = "KOCHI",
                            cust_code = "ABC",
                            cust_credit_limit = 0m,
                            cust_display_name = "ABC LTD",
                            cust_is_parent = "Y",
                            cust_name = "ABC LTD KOCHI",
                            cust_row_type = "CUSTOMER",
                            cust_short_name = "ABC",
                            cust_type = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 120, DateTimeKind.Utc).AddTicks(1532),
                            rec_locked = "N",
                            rec_version = 0
                        });
                });

            modelBuilder.Entity("Database.Models.Masters.mast_param", b =>
                {
                    b.Property<int>("param_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<string>("param_code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("param_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("param_order")
                        .HasColumnType("integer");

                    b.Property<string>("param_type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("param_value1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("param_value2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("param_value3")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("param_value4")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("param_value5")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("rec_branch_id")
                        .HasColumnType("integer");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("param_id")
                        .HasName("pk_mast_param_param_id");

                    b.HasIndex("rec_branch_id");

                    b.HasIndex("rec_company_id", "param_type", "param_code")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_param_param_code");

                    b.HasIndex("rec_company_id", "param_type", "param_name")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_param_param_name");

                    b.ToTable("mast_param", (string)null);

                    b.HasData(
                        new
                        {
                            param_id = 1,
                            param_code = "IN",
                            param_name = "INDIA",
                            param_order = 1,
                            param_type = "COUNTRY",
                            param_value1 = "",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7313),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 2,
                            param_code = "US",
                            param_name = "USA",
                            param_order = 2,
                            param_type = "COUNTRY",
                            param_value1 = "",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7318),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 3,
                            param_code = "KL",
                            param_name = "KERALA",
                            param_order = 1,
                            param_type = "STATE",
                            param_value1 = "",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7343),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 4,
                            param_code = "CMA",
                            param_name = "CMA CHM",
                            param_order = 1,
                            param_type = "SEA CARRIER",
                            param_value1 = "CMDU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7349),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 5,
                            param_code = "HLCU",
                            param_name = "HAPAQ LLOYD",
                            param_order = 2,
                            param_type = "SEA CARRIER",
                            param_value1 = "HLCU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7352),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 6,
                            param_code = "MAEU",
                            param_name = "MAERSK",
                            param_order = 3,
                            param_type = "SEA CARRIER",
                            param_value1 = "MAEU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7355),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 7,
                            param_code = "MSCU",
                            param_name = "MSC",
                            param_order = 4,
                            param_type = "SEA CARRIER",
                            param_value1 = "MSCU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7359),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 8,
                            param_code = "EGLV",
                            param_name = "EVERGREEN",
                            param_order = 5,
                            param_type = "SEA CARRIER",
                            param_value1 = "EGLV",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7417),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 9,
                            param_code = "HDMU",
                            param_name = "HMM",
                            param_order = 6,
                            param_type = "SEA CARRIER",
                            param_value1 = "HDMU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7420),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 10,
                            param_code = "YMLU",
                            param_name = "YANG MING",
                            param_order = 7,
                            param_type = "SEA CARRIER",
                            param_value1 = "YMLU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7422),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 11,
                            param_code = "ONEY",
                            param_name = "OCEAN NETWORK EXPRESS",
                            param_order = 8,
                            param_type = "SEA CARRIER",
                            param_value1 = "ONEY",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7424),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 12,
                            param_code = "OOCL",
                            param_name = "OOCL",
                            param_order = 9,
                            param_type = "SEA CARRIER",
                            param_value1 = "OOLU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7427),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 13,
                            param_code = "COSCO",
                            param_name = "COSCO",
                            param_order = 10,
                            param_type = "SEA CARRIER",
                            param_value1 = "COSU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7430),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 14,
                            param_code = "ANL",
                            param_name = "ANL",
                            param_order = 11,
                            param_type = "SEA CARRIER",
                            param_value1 = "ANNU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7432),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 15,
                            param_code = "APL",
                            param_name = "APL",
                            param_order = 12,
                            param_type = "SEA CARRIER",
                            param_value1 = "ANNU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7434),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 16,
                            param_code = "EMIRATES",
                            param_name = "EMIRATES",
                            param_order = 13,
                            param_type = "SEA CARRIER",
                            param_value1 = "ESPU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7437),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 17,
                            param_code = "HANJIN",
                            param_name = "HANJIN",
                            param_order = 14,
                            param_type = "SEA CARRIER",
                            param_value1 = "HJSC",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7439),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 18,
                            param_code = "KLINE",
                            param_name = "KLINE",
                            param_order = 15,
                            param_type = "SEA CARRIER",
                            param_value1 = "KKLU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7442),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 19,
                            param_code = "MOL",
                            param_name = "MOL",
                            param_order = 16,
                            param_type = "SEA CARRIER",
                            param_value1 = "MOLU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7444),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 20,
                            param_code = "NYK",
                            param_name = "NYK LINE",
                            param_order = 17,
                            param_type = "SEA CARRIER",
                            param_value1 = "NYKS",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7446),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 21,
                            param_code = "OSTI",
                            param_name = "ORIENT STAR",
                            param_order = 18,
                            param_type = "SEA CARRIER",
                            param_value1 = "OSTI",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7449),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 22,
                            param_code = "PAN ASIA",
                            param_name = "PAN ASIA",
                            param_order = 19,
                            param_type = "SEA CARRIER",
                            param_value1 = "PALU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7451),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 23,
                            param_code = "PIL",
                            param_name = "PIL",
                            param_order = 20,
                            param_type = "SEA CARRIER",
                            param_value1 = "PCIU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7453),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 24,
                            param_code = "PMO",
                            param_name = "PMO",
                            param_order = 21,
                            param_type = "SEA CARRIER",
                            param_value1 = "PMOL",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7456),
                            rec_version = 0
                        },
                        new
                        {
                            param_id = 25,
                            param_code = "ZIM",
                            param_name = "ZIM",
                            param_order = 22,
                            param_type = "SEA CARRIER",
                            param_value1 = "ZIMU",
                            param_value2 = "",
                            param_value3 = "",
                            param_value4 = "",
                            param_value5 = "",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 115, DateTimeKind.Utc).AddTicks(7458),
                            rec_version = 0
                        });
                });

            modelBuilder.Entity("Database.Models.TnT.tnt_trackd", b =>
                {
                    b.Property<int>("trackd_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("trackd_last_updated_on")
                        .HasColumnType("timestamp");

                    b.Property<int>("trackd_trackm_id")
                        .HasColumnType("integer");

                    b.HasKey("trackd_id")
                        .HasName("pk_tnt_trackd_trackd_id");

                    b.HasIndex("rec_company_id");

                    b.HasIndex("trackd_trackm_id");

                    b.ToTable("tnt_trackd", (string)null);
                });

            modelBuilder.Entity("Database.Models.TnT.tnt_tracking_data", b =>
                {
                    b.Property<int>("track_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("track_id"));

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("tnt_container")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("tnt_eventCreatedDateTime")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("tnt_eventCreatedDateTime_utc")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("tnt_eventDateTime")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("tnt_eventDateTime_utc")
                        .HasColumnType("timestamptz");

                    b.Property<string>("tnt_event_confirm_status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("tnt_event_type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("tnt_port_code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("tnt_port_location")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("tnt_port_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("tnt_row_type")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("tnt_status_code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("tnt_status_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("tnt_trackd_id")
                        .HasColumnType("integer");

                    b.Property<int>("tnt_trackm_id")
                        .HasColumnType("integer");

                    b.Property<string>("tnt_transport_mode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("tnt_vessel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("tnt_vessel_imon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("tnt_voyage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("track_id")
                        .HasName("pk_tnt_tracking_data_track_id");

                    b.HasIndex("rec_company_id");

                    b.HasIndex("tnt_trackd_id");

                    b.HasIndex("tnt_trackm_id");

                    b.ToTable("tnt_tracking_data", (string)null);
                });

            modelBuilder.Entity("Database.Models.TnT.tnt_trackm", b =>
                {
                    b.Property<int>("track_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("track_api_type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("track_book_no")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("track_carrier_id")
                        .HasColumnType("integer");

                    b.Property<string>("track_cntr_no")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<DateTime?>("track_last_updated_on")
                        .HasColumnType("timestamp");

                    b.Property<string>("track_pod_code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("track_pod_eta")
                        .HasColumnType("date");

                    b.Property<string>("track_pod_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("track_pol_code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("track_pol_etd")
                        .HasColumnType("date");

                    b.Property<string>("track_pol_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("track_request_id")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime?>("track_sent_on")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("track_trackd_id")
                        .HasColumnType("integer");

                    b.Property<string>("track_vessel_code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("track_vessel_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("track_voyage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("track_id")
                        .HasName("pk_tnt_trackm_track_id");

                    b.HasIndex("rec_company_id");

                    b.HasIndex("track_carrier_id");

                    b.ToTable("tnt_trackm", (string)null);

                    b.HasData(
                        new
                        {
                            track_id = 100,
                            rec_company_id = 1,
                            rec_created_by = "admin",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 132, DateTimeKind.Utc).AddTicks(1362),
                            rec_version = 0,
                            track_api_type = "API",
                            track_book_no = "",
                            track_carrier_id = 5,
                            track_cntr_no = "HLXU8787996",
                            track_trackd_id = 0
                        },
                        new
                        {
                            track_id = 101,
                            rec_company_id = 1,
                            rec_created_by = "admin",
                            rec_created_date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            rec_version = 0,
                            track_api_type = "API",
                            track_book_no = "",
                            track_carrier_id = 4,
                            track_cntr_no = "CMAU7228147",
                            track_trackd_id = 0
                        },
                        new
                        {
                            track_id = 102,
                            rec_company_id = 1,
                            rec_created_by = "admin",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 132, DateTimeKind.Utc).AddTicks(1368),
                            rec_version = 0,
                            track_api_type = "API",
                            track_book_no = "",
                            track_carrier_id = 6,
                            track_cntr_no = "MAEU3417227",
                            track_trackd_id = 0
                        },
                        new
                        {
                            track_id = 103,
                            rec_company_id = 1,
                            rec_created_by = "admin",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 132, DateTimeKind.Utc).AddTicks(1370),
                            rec_version = 0,
                            track_api_type = "API-1",
                            track_book_no = "",
                            track_carrier_id = 10,
                            track_cntr_no = "MAGU5540135",
                            track_trackd_id = 0
                        },
                        new
                        {
                            track_id = 104,
                            rec_company_id = 1,
                            rec_created_by = "admin",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 132, DateTimeKind.Utc).AddTicks(1372),
                            rec_version = 0,
                            track_api_type = "SHIPSGO",
                            track_book_no = "",
                            track_carrier_id = 13,
                            track_cntr_no = "BEAU6030782",
                            track_request_id = "4179934",
                            track_trackd_id = 0
                        },
                        new
                        {
                            track_id = 105,
                            rec_company_id = 1,
                            rec_created_by = "admin",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 132, DateTimeKind.Utc).AddTicks(1374),
                            rec_version = 0,
                            track_api_type = "SHIPSGO",
                            track_book_no = "",
                            track_carrier_id = 7,
                            track_cntr_no = "SEGU9471335",
                            track_request_id = "4182169",
                            track_trackd_id = 0
                        });
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_auditm", b =>
                {
                    b.Property<int>("log_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<string>("log_column")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("log_date")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("log_desc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("log_refno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("log_table")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("log_table_id")
                        .HasColumnType("integer");

                    b.Property<string>("log_user_code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("log_value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("rec_branch_id")
                        .HasColumnType("integer");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.HasKey("log_id")
                        .HasName("pk_mast_logm_log_id");

                    b.HasIndex("log_id")
                        .HasDatabaseName("uq_mast_logm_log_id");

                    b.ToTable("mast_logm", (string)null);
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_branchm", b =>
                {
                    b.Property<int>("branch_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<string>("branch_address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("branch_address2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("branch_address3")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("branch_code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("branch_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("branch_id")
                        .HasName("pk_mast_branchm_branch_id");

                    b.HasIndex("rec_company_id", "branch_code")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_branchm_branch_code");

                    b.HasIndex("rec_company_id", "branch_name")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_branchm_branch_name");

                    b.ToTable("mast_branchm", (string)null);

                    b.HasData(
                        new
                        {
                            branch_id = 1,
                            branch_address1 = "ADDRESS LINE 1",
                            branch_address2 = "ADDRESS LINE 2",
                            branch_address3 = "ADDRESS LINE3 3",
                            branch_code = "BRANCH1",
                            branch_name = "BRANCH1",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 80, DateTimeKind.Utc).AddTicks(5883),
                            rec_locked = "N",
                            rec_version = 0
                        },
                        new
                        {
                            branch_id = 2,
                            branch_address1 = "ADDRESS LINE 1",
                            branch_address2 = "ADDRESS LINE 2",
                            branch_address3 = "ADDRESS LINE3 3",
                            branch_code = "BRANCH2",
                            branch_name = "BRANCH2",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 80, DateTimeKind.Utc).AddTicks(5889),
                            rec_locked = "N",
                            rec_version = 0
                        },
                        new
                        {
                            branch_id = 3,
                            branch_address1 = "ADDRESS LINE 1",
                            branch_address2 = "ADDRESS LINE 2",
                            branch_address3 = "ADDRESS LINE3 3",
                            branch_code = "BRANCH3",
                            branch_name = "BRANCH3",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 80, DateTimeKind.Utc).AddTicks(5891),
                            rec_locked = "N",
                            rec_version = 0
                        });
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_companym", b =>
                {
                    b.Property<int>("comp_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<string>("comp_address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("comp_address2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("comp_address3")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("comp_code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("comp_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("comp_id")
                        .HasName("pk_mast_companym_comp_id");

                    b.HasIndex("comp_id", "comp_code")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_companym_comp_code");

                    b.HasIndex("comp_id", "comp_name")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_companym_comp_name");

                    b.ToTable("mast_companym", (string)null);

                    b.HasData(
                        new
                        {
                            comp_id = 1,
                            comp_address1 = "ADDRESS LINE 1",
                            comp_address2 = "ADDRESS LINE 2",
                            comp_address3 = "ADDRESS LINE3 3",
                            comp_code = "COMPANY1",
                            comp_name = "COMPANY1",
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 53, DateTimeKind.Utc).AddTicks(5235),
                            rec_version = 0
                        },
                        new
                        {
                            comp_id = 2,
                            comp_address1 = "ADDRESS LINE 1",
                            comp_address2 = "ADDRESS LINE 2",
                            comp_address3 = "ADDRESS LINE3 3",
                            comp_code = "COMPANY2",
                            comp_name = "COMPANY2",
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 53, DateTimeKind.Utc).AddTicks(5240),
                            rec_version = 0
                        });
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_menum", b =>
                {
                    b.Property<int>("menu_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<string>("menu_code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("menu_module_id")
                        .HasColumnType("integer");

                    b.Property<string>("menu_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("menu_order")
                        .HasColumnType("integer");

                    b.Property<string>("menu_param")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("menu_route")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("menu_submenu_id")
                        .HasColumnType("integer");

                    b.Property<string>("menu_visible")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("menu_id")
                        .HasName("pk_mast_menum_menu_id");

                    b.HasIndex("menu_module_id");

                    b.HasIndex("menu_submenu_id");

                    b.HasIndex("rec_company_id");

                    b.HasIndex("menu_id", "menu_name")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_menum_menu_name");

                    b.ToTable("mast_menum", (string)null);

                    b.HasData(
                        new
                        {
                            menu_id = 501,
                            menu_code = "ACCGROUP",
                            menu_module_id = 20,
                            menu_name = "A/c Group",
                            menu_order = 1,
                            menu_param = "{'type':'ACCGROUP'}",
                            menu_route = "accounts/accgroupList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(73),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 502,
                            menu_code = "ACCTM-MAINCODE",
                            menu_module_id = 20,
                            menu_name = "A/c Main Code",
                            menu_order = 2,
                            menu_param = "{'type':'MAIN-CODE'}",
                            menu_route = "accounts/acctmList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(78),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 503,
                            menu_code = "ACCTM",
                            menu_module_id = 20,
                            menu_name = "A/c Master",
                            menu_order = 3,
                            menu_param = "{'type':'ACC-CODE'}",
                            menu_route = "accounts/acctmList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(81),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 701,
                            menu_code = "COMPANY",
                            menu_module_id = 21,
                            menu_name = "Company Master",
                            menu_order = 1,
                            menu_param = "{'type':'COMPANY'}",
                            menu_route = "admin/companyList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(152),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 702,
                            menu_code = "BRANCH",
                            menu_module_id = 21,
                            menu_name = "Branch Master",
                            menu_order = 2,
                            menu_param = "{'type':'BRANCH'}",
                            menu_route = "admin/branchList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(155),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 703,
                            menu_code = "MODULE",
                            menu_module_id = 21,
                            menu_name = "Module Master",
                            menu_order = 3,
                            menu_param = "{'type':'MODULE'}",
                            menu_route = "admin/moduleList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(157),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 704,
                            menu_code = "USER",
                            menu_module_id = 21,
                            menu_name = "User Master",
                            menu_order = 4,
                            menu_param = "{'type':'USER'}",
                            menu_route = "admin/userList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(159),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 705,
                            menu_code = "MENU",
                            menu_module_id = 21,
                            menu_name = "Menu Master",
                            menu_order = 5,
                            menu_param = "{'type':'MENU'}",
                            menu_route = "admin/menuList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(162),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 706,
                            menu_code = "RIGHTS",
                            menu_module_id = 21,
                            menu_name = "User Rights",
                            menu_order = 6,
                            menu_param = "{'type':'RIGHTS'}",
                            menu_route = "admin/rightsList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(164),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 707,
                            menu_code = "COUNTRY",
                            menu_module_id = 21,
                            menu_name = "Country Master",
                            menu_order = 7,
                            menu_param = "{'type':'COUNTRY'}",
                            menu_route = "masters/paramList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(166),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 708,
                            menu_code = "STATE",
                            menu_module_id = 21,
                            menu_name = "State Master",
                            menu_order = 8,
                            menu_param = "{'type':'STATE'}",
                            menu_route = "masters/paramList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(168),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 709,
                            menu_code = "COMPANY-SETTINGS",
                            menu_module_id = 21,
                            menu_name = "Company Settings",
                            menu_order = 9,
                            menu_param = "{'type':'COMPANY-SETTINGS'}",
                            menu_route = "admin/settingsList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(170),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 710,
                            menu_code = "BRANCH-SETTINGS",
                            menu_module_id = 21,
                            menu_name = "Branch Settings",
                            menu_order = 10,
                            menu_param = "{'type':'BRANCH-SETTINGS'}",
                            menu_route = "admin/settingsList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(172),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 711,
                            menu_code = "CUSTOMER",
                            menu_module_id = 21,
                            menu_name = "Customer Master",
                            menu_order = 11,
                            menu_param = "{'type':'CUSTOMER'}",
                            menu_route = "masters/customerList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(174),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 800,
                            menu_code = "TRACKING",
                            menu_module_id = 22,
                            menu_name = "Container Tracking",
                            menu_order = 1,
                            menu_param = "{'type':'TRACKING'}",
                            menu_route = "tnt/trackList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(176),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 801,
                            menu_code = "SEACARRIER",
                            menu_module_id = 21,
                            menu_name = "Ocean Carrier",
                            menu_order = 10,
                            menu_param = "{'type':'SEA CARRIER'}",
                            menu_route = "masters/paramList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(178),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 802,
                            menu_code = "AIRCARRIER",
                            menu_module_id = 21,
                            menu_name = "Air Carrier",
                            menu_order = 10,
                            menu_param = "{'type':'AIR CARRIER'}",
                            menu_route = "masters/paramList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(180),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 810,
                            menu_code = "PARAM-SETTINGS",
                            menu_module_id = 21,
                            menu_name = "Param Settings",
                            menu_order = 11,
                            menu_param = "{'type':'PARAM-SETTINGS'}",
                            menu_route = "admin/settingsList",
                            menu_visible = "N",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(183),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 811,
                            menu_code = "SALESMAN",
                            menu_module_id = 21,
                            menu_name = "Salesman",
                            menu_order = 12,
                            menu_param = "{'type':'SALESMAN'}",
                            menu_route = "masters/paramList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(185),
                            rec_version = 0
                        },
                        new
                        {
                            menu_id = 812,
                            menu_code = "SEA-PORT",
                            menu_module_id = 21,
                            menu_name = "Sea port",
                            menu_order = 13,
                            menu_param = "{'type':'SEA-PORT'}",
                            menu_route = "masters/paramList",
                            menu_visible = "Y",
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 93, DateTimeKind.Utc).AddTicks(187),
                            rec_version = 0
                        });
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_modulem", b =>
                {
                    b.Property<int>("module_id")
                        .HasColumnType("integer");

                    b.Property<string>("module_is_installed")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<string>("module_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("module_order")
                        .HasColumnType("integer");

                    b.Property<int?>("module_parent_id")
                        .HasColumnType("integer");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("module_id")
                        .HasName("pk_mast_modulem_module_id");

                    b.HasIndex("module_parent_id");

                    b.HasIndex("rec_company_id", "module_name")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_modulem_rec_company_id_module_name");

                    b.ToTable("mast_modulem", (string)null);

                    b.HasData(
                        new
                        {
                            module_id = 20,
                            module_is_installed = "Y",
                            module_name = "Accounts",
                            module_order = 1,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 84, DateTimeKind.Utc).AddTicks(1035),
                            rec_version = 0
                        },
                        new
                        {
                            module_id = 21,
                            module_is_installed = "Y",
                            module_name = "Masters",
                            module_order = 3,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 84, DateTimeKind.Utc).AddTicks(1040),
                            rec_version = 0
                        },
                        new
                        {
                            module_id = 22,
                            module_is_installed = "Y",
                            module_name = "Tracking",
                            module_order = 4,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 84, DateTimeKind.Utc).AddTicks(1042),
                            rec_version = 0
                        });
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_rightsm", b =>
                {
                    b.Property<int>("rights_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<int?>("rec_branch_id")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .HasColumnType("integer");

                    b.Property<string>("rights_add")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<string>("rights_admin")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<string>("rights_approver")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<string>("rights_company")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<string>("rights_delete")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<string>("rights_doc_upload")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<string>("rights_doc_view")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<string>("rights_edit")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<int>("rights_menu_id")
                        .HasColumnType("integer");

                    b.Property<int>("rights_parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("rights_print")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<int>("rights_user_id")
                        .HasColumnType("integer");

                    b.Property<string>("rights_value")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("rights_view")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.HasKey("rights_id")
                        .HasName("pk_mast_rightsm_rights_id");

                    b.HasIndex("rec_branch_id");

                    b.HasIndex("rights_menu_id");

                    b.HasIndex("rights_parent_id");

                    b.HasIndex("rights_user_id");

                    b.HasIndex("rec_company_id", "rec_branch_id", "rights_user_id", "rights_menu_id")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_rightsm_menu_id");

                    b.ToTable("mast_rightsm", (string)null);
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_settings", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<string>("caption")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("code")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("json")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("order")
                        .HasColumnType("integer");

                    b.Property<int?>("param_id")
                        .HasColumnType("integer");

                    b.Property<int?>("rec_branch_id")
                        .HasColumnType("integer");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("remarks")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("table")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.HasKey("id")
                        .HasName("pk_mast_settigs_id");

                    b.HasIndex("rec_branch_id");

                    b.HasIndex("rec_company_id", "rec_branch_id", "param_id", "caption")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_settings_rec_company_id_branch_id_param_id_caption");

                    b.ToTable("mast_settings", (string)null);
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_userbranches", b =>
                {
                    b.Property<int>("ub_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"master_sequence\"')");

                    b.Property<int?>("rec_branch_id")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("ub_user_id")
                        .HasColumnType("integer");

                    b.HasKey("ub_id")
                        .HasName("pk_mast_userbranches_ub_id");

                    b.HasIndex("rec_branch_id");

                    b.HasIndex("ub_user_id");

                    b.HasIndex("rec_company_id", "ub_user_id", "rec_branch_id")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_userbranches_branch");

                    b.ToTable("mast_userbranches", (string)null);

                    b.HasData(
                        new
                        {
                            ub_id = 1,
                            rec_branch_id = 1,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 100, DateTimeKind.Utc).AddTicks(9478),
                            rec_version = 0,
                            ub_user_id = 2
                        },
                        new
                        {
                            ub_id = 2,
                            rec_branch_id = 2,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 100, DateTimeKind.Utc).AddTicks(9482),
                            rec_version = 0,
                            ub_user_id = 2
                        });
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_userm", b =>
                {
                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.Property<int?>("rec_branch_id")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("rec_company_id")
                        .HasColumnType("integer");

                    b.Property<string>("rec_created_by")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("rec_created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_edited_by")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("rec_edited_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rec_locked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char")
                        .HasDefaultValue("N");

                    b.Property<int>("rec_version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("user_code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("user_email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("user_is_admin")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char");

                    b.Property<string>("user_name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("user_password")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("user_id")
                        .HasName("pk_mast_userm_user_id");

                    b.HasIndex("rec_branch_id");

                    b.HasIndex("rec_company_id", "user_code")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_userm_user_code");

                    b.HasIndex("rec_company_id", "user_name")
                        .IsUnique()
                        .HasDatabaseName("uq_mast_userm_user_name");

                    b.ToTable("mast_userm", (string)null);

                    b.HasData(
                        new
                        {
                            user_id = 1,
                            rec_branch_id = 1,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 97, DateTimeKind.Utc).AddTicks(3904),
                            rec_version = 0,
                            user_code = "ADMIN",
                            user_email = "admin@gmail.com",
                            user_is_admin = "Y",
                            user_name = "ADMIN",
                            user_password = "ADMIN"
                        },
                        new
                        {
                            user_id = 2,
                            rec_branch_id = 1,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 97, DateTimeKind.Utc).AddTicks(3908),
                            rec_version = 0,
                            user_code = "USER1",
                            user_email = "user1@gmail.com",
                            user_is_admin = "N",
                            user_name = "USER1",
                            user_password = "USER1"
                        },
                        new
                        {
                            user_id = 3,
                            rec_branch_id = 1,
                            rec_company_id = 1,
                            rec_created_by = "ADMIN",
                            rec_created_date = new DateTime(2025, 1, 8, 7, 17, 56, 97, DateTimeKind.Utc).AddTicks(3910),
                            rec_version = 0,
                            user_code = "USER2",
                            user_email = "user2@gmail.com",
                            user_is_admin = "N",
                            user_name = "USER2",
                            user_password = "USER2"
                        });
                });

            modelBuilder.Entity("Database.Models.Accounts.acc_acctm", b =>
                {
                    b.HasOne("Database.Models.Accounts.acc_groupm", "acc_groupm")
                        .WithMany()
                        .HasForeignKey("acc_grp_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_acctm_acc_grp_id");

                    b.HasOne("Database.Models.Accounts.acc_acctm", "acctm")
                        .WithMany()
                        .HasForeignKey("acc_maincode_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_mast_acctm_acc_maincode_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_acctm_rec_company_id");

                    b.Navigation("acc_groupm");

                    b.Navigation("acctm");

                    b.Navigation("company");
                });

            modelBuilder.Entity("Database.Models.Accounts.acc_groupm", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_acc_groupm_rec_company_id");

                    b.Navigation("company");
                });

            modelBuilder.Entity("Database.Models.Marketing.mark_qtnd_lcl", b =>
                {
                    b.HasOne("Database.Models.Marketing.mark_qtnm", null)
                        .WithMany("qtnd_lcl")
                        .HasForeignKey("mark_qtnmqtnm_id");

                    b.HasOne("Database.Models.Accounts.acc_acctm", "acctm")
                        .WithMany()
                        .HasForeignKey("qtnd_acc_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mark_qtnd_lcl_qtnd_acc_id");

                    b.HasOne("Database.Models.Marketing.mark_qtnm", "qtnm")
                        .WithMany()
                        .HasForeignKey("qtnd_qtnm_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mark_qtnd_lcl_qtnm_pkid");

                    b.HasOne("Database.Models.UserAdmin.mast_branchm", "branch")
                        .WithMany()
                        .HasForeignKey("rec_branch_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mark_qtnd_lcl_rec_branch_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mark_qtnd_lcl_rec_company_id");

                    b.Navigation("acctm");

                    b.Navigation("branch");

                    b.Navigation("company");

                    b.Navigation("qtnm");
                });

            modelBuilder.Entity("Database.Models.Marketing.mark_qtnm", b =>
                {
                    b.HasOne("Database.Models.Masters.mast_param", "pod")
                        .WithMany()
                        .HasForeignKey("qtnm_pod_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_mark_qtnm_qtnm_pod_id");

                    b.HasOne("Database.Models.Masters.mast_param", "pol")
                        .WithMany()
                        .HasForeignKey("qtnm_pol_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_mark_qtnm_qtnm_pol_id");

                    b.HasOne("Database.Models.Masters.mast_param", "por")
                        .WithMany()
                        .HasForeignKey("qtnm_por_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_mark_qtnm_qtnm_por_id");

                    b.HasOne("Database.Models.Masters.mast_param", "salesman")
                        .WithMany()
                        .HasForeignKey("qtnm_salesman_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mark_qtnm_qtnm_salesman_id");

                    b.HasOne("Database.Models.Masters.mast_customerm", "customer")
                        .WithMany()
                        .HasForeignKey("qtnm_to_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mark_qtnm_qtnm_to_id");

                    b.HasOne("Database.Models.UserAdmin.mast_branchm", "branch")
                        .WithMany()
                        .HasForeignKey("rec_branch_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mark_qtnm_rec_branch_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mark_qtnm_rec_company_id");

                    b.Navigation("branch");

                    b.Navigation("company");

                    b.Navigation("customer");

                    b.Navigation("pod");

                    b.Navigation("pol");

                    b.Navigation("por");

                    b.Navigation("salesman");
                });

            modelBuilder.Entity("Database.Models.Masters.mast_contactm", b =>
                {
                    b.HasOne("Database.Models.Masters.mast_param", "country")
                        .WithMany()
                        .HasForeignKey("cont_country_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_contactm_cont_country_id");

                    b.HasOne("Database.Models.Masters.mast_customerm", "customer")
                        .WithMany()
                        .HasForeignKey("cont_parent_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_contactm_cont_parent_id");

                    b.HasOne("Database.Models.Masters.mast_customerm", null)
                        .WithMany("cust_contacts")
                        .HasForeignKey("mast_customermcust_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_contactm_rec_company_id");

                    b.Navigation("company");

                    b.Navigation("country");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Database.Models.Masters.mast_customerm", b =>
                {
                    b.HasOne("Database.Models.Masters.mast_customerm", "customer")
                        .WithMany()
                        .HasForeignKey("cust_parent_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_mast_customerm_cust_parent_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_customerm_rec_company_id");

                    b.Navigation("company");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Database.Models.Masters.mast_param", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_branchm", "branch")
                        .WithMany()
                        .HasForeignKey("rec_branch_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_mast_param_rec_branch_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_param_rec_company_id");

                    b.Navigation("branch");

                    b.Navigation("company");
                });

            modelBuilder.Entity("Database.Models.TnT.tnt_trackd", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_trackd_rec_company_id");

                    b.HasOne("Database.Models.TnT.tnt_trackm", "trackm")
                        .WithMany("trackd")
                        .HasForeignKey("trackd_trackm_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("trackm");
                });

            modelBuilder.Entity("Database.Models.TnT.tnt_tracking_data", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_tracking_data_rec_company_id");

                    b.HasOne("Database.Models.TnT.tnt_trackd", "trackd")
                        .WithMany("tracking_data")
                        .HasForeignKey("tnt_trackd_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Database.Models.TnT.tnt_trackm", "trackm")
                        .WithMany("tracking_data")
                        .HasForeignKey("tnt_trackm_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("trackd");

                    b.Navigation("trackm");
                });

            modelBuilder.Entity("Database.Models.TnT.tnt_trackm", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_tnt_trackm_rec_company_id");

                    b.HasOne("Database.Models.Masters.mast_param", "param_carrier")
                        .WithMany()
                        .HasForeignKey("track_carrier_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("param_carrier");
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_branchm", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany("branches")
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_branchm_rec_company_id");

                    b.Navigation("company");
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_menum", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_modulem", "module")
                        .WithMany("menus")
                        .HasForeignKey("menu_module_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_menum_menu_module_id");

                    b.HasOne("Database.Models.UserAdmin.mast_modulem", "submenu")
                        .WithMany()
                        .HasForeignKey("menu_submenu_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_mast_menum_menu_submenu_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_menum_rec_company_id");

                    b.Navigation("company");

                    b.Navigation("module");

                    b.Navigation("submenu");
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_modulem", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_modulem", "module")
                        .WithMany()
                        .HasForeignKey("module_parent_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_mast_modulem_module_parent_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_modulem_rec_company_id");

                    b.Navigation("company");

                    b.Navigation("module");
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_rightsm", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_branchm", "branch")
                        .WithMany()
                        .HasForeignKey("rec_branch_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_branchm_rec_branch_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_rightsm_rec_company_id");

                    b.HasOne("Database.Models.UserAdmin.mast_menum", "menu")
                        .WithMany()
                        .HasForeignKey("rights_menu_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_rightsm_rights_menu_id");

                    b.HasOne("Database.Models.UserAdmin.mast_userbranches", "userbranches")
                        .WithMany()
                        .HasForeignKey("rights_parent_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_rightsm_rights_parent_id");

                    b.HasOne("Database.Models.UserAdmin.mast_userm", "user")
                        .WithMany()
                        .HasForeignKey("rights_user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_rightsm_rights_user_id");

                    b.Navigation("branch");

                    b.Navigation("company");

                    b.Navigation("menu");

                    b.Navigation("user");

                    b.Navigation("userbranches");
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_settings", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_branchm", "branch")
                        .WithMany()
                        .HasForeignKey("rec_branch_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_mast_settings_rec_branch_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_settings_rec_company_id");

                    b.Navigation("branch");

                    b.Navigation("company");
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_userbranches", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_branchm", "branch")
                        .WithMany()
                        .HasForeignKey("rec_branch_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_branchm_rec_branch_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_userbranches_rec_company_id");

                    b.HasOne("Database.Models.UserAdmin.mast_userm", "user")
                        .WithMany("userbranches")
                        .HasForeignKey("ub_user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_userbranches_ub_user_id");

                    b.Navigation("branch");

                    b.Navigation("company");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_userm", b =>
                {
                    b.HasOne("Database.Models.UserAdmin.mast_branchm", "branch")
                        .WithMany()
                        .HasForeignKey("rec_branch_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_userm_rec_branch_id");

                    b.HasOne("Database.Models.UserAdmin.mast_companym", "company")
                        .WithMany()
                        .HasForeignKey("rec_company_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_mast_userm_rec_company_id");

                    b.Navigation("branch");

                    b.Navigation("company");
                });

            modelBuilder.Entity("Database.Models.Marketing.mark_qtnm", b =>
                {
                    b.Navigation("qtnd_lcl");
                });

            modelBuilder.Entity("Database.Models.Masters.mast_customerm", b =>
                {
                    b.Navigation("cust_contacts");
                });

            modelBuilder.Entity("Database.Models.TnT.tnt_trackd", b =>
                {
                    b.Navigation("tracking_data");
                });

            modelBuilder.Entity("Database.Models.TnT.tnt_trackm", b =>
                {
                    b.Navigation("trackd");

                    b.Navigation("tracking_data");
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_companym", b =>
                {
                    b.Navigation("branches");
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_modulem", b =>
                {
                    b.Navigation("menus");
                });

            modelBuilder.Entity("Database.Models.UserAdmin.mast_userm", b =>
                {
                    b.Navigation("userbranches");
                });
#pragma warning restore 612, 618
        }
    }
}
